#+TITLE: Emacs Configuration
#+AUTHOR: Flávio L. C. de Moura
#+TOC: true
#+DATE: [2018-03-30 Sex 20:44]

This is my emacs configuration. Adapted from https://github.com/jamiecollinson/dotfiles

* Setup

** Shortcut for editing this file

#+BEGIN_SRC emacs-lisp
   (defun find-config ()
   "Edit config.org"
   (interactive)
   (find-file "~/dotfiles/config.org"))

   (global-set-key (kbd "C-c I") 'find-config)
#+END_SRC

** Package sources

#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (setq package-enable-at-startup nil)
#+END_SRC

** Bootstrap use-package

If =use-package= is not installed, install it.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

** Set custom settings to load in own file

This stops emacs adding customised settings to =init.el=. I try to avoid using customize anyway, preferring programmatic control of variables. Creating it as a temporary file effectively disables it (i.e. any changes are session local).

#+BEGIN_SRC emacs-lisp
  (setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC

** Auto fill mode
#+BEGIN_SRC emacs-lisp
(setq-default auto-fill-function 'do-auto-fill)
#+END_SRC

* Preferences 

Smooth scroll and keep cursor at same position when scrolling

#+BEGIN_SRC emacs-lisp
(setq scroll-step 1)
(setq scroll-preserve-screen-position 1)
#+END_SRC

Increase and decrease font size

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-=") 'text-scale-increase)
(global-set-key (kbd "M--") 'text-scale-decrease)
#+END_SRC

Don't display the help screen on startup.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

On  I use ⌘ as =meta= and prefer ⌥ to do nothing so I can still insert special characters like easily.

#+BEGIN_SRC emacs-lisp
  (setq mac-command-modifier 'meta
        mac-option-modifier 'none)
#+END_SRC

I prefer lines to wrap.

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC

Let's turn off unwanted window decoration.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

I don't want the error bell.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

Make the =yes or no= prompts shorter.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

A common frustration with new Emacs users is the =filename#= files created. This centralises the backup files created as you edit.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
    backup-by-copying t    ; Don't delink hardlinks
    version-control t      ; Use version numbers on backups
    delete-old-versions t  ; Automatically delete excess backups
    kept-new-versions 20   ; how many of the newest versions to keep
    kept-old-versions 5    ; and how many of the old
    )
#+END_SRC
* Appearance

Powerline is a port from vim, and improves the modeline. Without specifying =powerline-default-separator= the separators don't show correctly for me.

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :disabled
    :ensure t
    :config
    (setq powerline-default-separator 'utf-8))
#+END_SRC

=feebleline= is a minimalist mode line replacement.

#+BEGIN_SRC emacs-lisp
  (use-package feebleline
    :ensure t)
#+END_SRC

Add emoji support. This is useful when working with html.

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t)
#+END_SRC

Sometimes it helps to focus on the thing currently under the cursor. This turns off syntax highlighting for everything but the current thing. It's useful sometimes but a bit buggy in certain modes. I wonder if I could improve the config / find a better alternative?

#+BEGIN_SRC emacs-lisp
  (use-package focus
    :ensure t)
#+END_SRC

Highlight the current line.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

Maximize window

#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook 'toggle-frame-maximized t)
#+END_SRC

* Coding
** Programming specific interface improvements

When programming I like my editor to try to help me with keeping parentheses balanced.

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC

Highlight parens etc. for improved readability.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

Highlight strings which represent colours. I only want this in programming modes, and I don't want colour names to be highlighted (=x-colors=).

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config
    (setq rainbow-x-colors nil)
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

Keep things indented correctly for me.

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
      :ensure t)
#+END_SRC

Expand parentheses for me.

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC

Smart dash guesses _ vs - depending on context.

#+BEGIN_SRC emacs-lisp
  (use-package smart-dash
    :ensure t
    :config
    (add-hook 'python-mode-hook 'smart-dash-mode))
#+END_SRC

** Ido
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :ensure t
    :config
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode t)
    (setq ido-use-filename-at-point 'guess)
    (setq ido-create-new-buffer 'always)
    (setq ido-file-extensions-order '(".org" ".tex" ".pdf")))
    #+END_SRC

** Project management

Projectile handles folders which are in version control.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode))
#+END_SRC

Tell projectile to integrate with =ivy= for completion.

#+BEGIN_SRC emacs-lisp
  (setq projectile-completion-system 'ivy)
#+END_SRC

Add some extra completion options via integration with =counsel=. In particular this enables =C-c p SPC= for smart buffer / file search, and =C-c p s s= for search via =ag=.

There is no function for projectile-grep, but we could use =counsel-git-grep= which is similar. Should I bind that to =C-c p s g=?

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (add-hook 'after-init-hook 'counsel-projectile-mode))
#+END_SRC

** Fuzzy search

=fzf= is a fuzzy file finder which is very quick.

#+BEGIN_SRC emacs-lisp
  (use-package fzf
    :ensure t)
#+END_SRC

** Environment management

By default Emacs doesn't read from the same environment variables set in your terminal. This package fixes that.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

** Jump to source

Individual language packages often support IDE features like jump to source, but =dumb-jump= attempts to support many languages by simple searching. It's quite effective even with dynamic libraries like JS and Python.

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :diminish dumb-jump-mode
    :bind (("C-M-g" . dumb-jump-go)
           ("C-M-p" . dumb-jump-back)
           ("C-M-q" . dumb-jump-quick-look)))
#+END_SRC

** Git

Magit is an awesome interface to git. Summon it with `C-x g`.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC

Display line changes in gutter based on git history. Enable it everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 't)
    :diminish git-gutter-mode)
#+END_SRC

TimeMachine lets us step through the history of a file as recorded in git.

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+END_SRC

** Syntax checking

=Flycheck= is a general syntax highlighting framework which other packages hook into. It's an improvment on the built in =flymake=.

Setup is pretty simple - we just enable globally and turn on a custom eslint function, and also add a custom checker for proselint.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-flycheck-mode)
    (add-hook 'flycheck-mode-hook 'jc/use-eslint-from-node-modules)
    (add-to-list 'flycheck-checkers 'proselint)
    (setq-default flycheck-highlighting-mode 'lines)
    ;; Define fringe indicator / warning levels
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00011100
              #b00111110
              #b00111110
              #b00111110
              #b00011100
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error)
    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning)
    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info))
    #+END_SRC

Proselint is a syntax checker for English language. This defines a custom checker which will run in texty modes.

Proselint is an external program, install it with =pip install proselint= for this to work.

#+BEGIN_SRC emacs-lisp
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode org-mode))
#+END_SRC

if you're in org-mode but not flycheck-mode, C-c ! will insert a timestamp. If you're in both org-mode and flycheck-mode, C-c ! ! will insert a timestamp.

#+BEGIN_SRC emacs-lisp
(define-key flycheck-mode-map (kbd "C-c ! !") 'org-time-stamp-inactive)
#+END_SRC

** Autocomplete

Company mode provides good autocomplete options. Perhaps I should add company-quickhelp for documentation (https://github.com/expez/company-quickhelp)?

It would also be good to improve integration with yasnippet as I don't feel I'm making the best use there.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish
    :config
    (add-hook 'after-init-hook 'global-company-mode)

    (setq company-idle-delay t)

    (use-package company-go
      :ensure t
      :config
      (add-to-list 'company-backends 'company-go))

    (use-package company-anaconda
      :ensure t
      :config
      (add-to-list 'company-backends 'company-anaconda)))
#+END_SRC

I don't want suggestions from open files / buffers to be automatically lowercased as these are often camelcase function names.

#+BEGIN_SRC emacs-lisp
  (setq company-dabbrev-downcase nil)
#+END_SRC

** Snippets

Unlike autocomplete which suggests words / symbols, snippets are pre-prepared templates which you fill in.

I'm using a community library (=[[https://github.com/AndreaCrotti/yasnippet-snippets]]=) with *lots* of ready made options, and have my own directory of custom snippets I've added. Not sure if I should unify these by forking =yasnippet-snippets=.

Type the shortcut and press =TAB= to complete, or =M-/= to autosuggest a snippet.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :config
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
      (yas-global-mode)
      (global-set-key (kbd "M-/") 'company-yasnippet))
#+END_SRC

** Javascript

In JS indent to 2 spaces.

#+BEGIN_SRC emacs-lisp
  (setq-default js-indent-level 2)
#+END_SRC

JS2 mode improves on the built in JS mode.

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :config
    (setq-default js2-ignored-warnings '("msg.extra.trailing.comma")))
#+END_SRC

=js2-refactor= supports some useful refactoring options and builds on top of =js2-mode=.

#+BEGIN_SRC emacs-lisp
  (use-package js2-refactor
    :ensure t
    :config
    (js2r-add-keybindings-with-prefix "C-c C-m")
    (add-hook 'js2-mode-hook 'js2-refactor-mode))
#+END_SRC

RJSX mode makes JSX work well.

#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t)
#+END_SRC

Prettier-js autoformats JS code - much like `gofmt` - and we hook it into JS2 and RJSX modes.

#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :config
    (setq prettier-js-args '(
                          "--trailing-comma" "es5"
                          "--single-quote" "true"
                          "--print-width" "100"
                          ))
    (add-hook 'js2-mode-hook 'prettier-js-mode)
    (add-hook 'rjsx-mode-hook 'prettier-js-mode))
#+END_SRC

=js-doc= makes it easy to add jsdoc comments via =Ctrl+c i=.

#+BEGIN_SRC emacs-lisp
  (use-package js-doc
    :ensure t
    :bind (:map js2-mode-map
           ("C-c i" . js-doc-insert-function-doc)
           ("@" . js-doc-insert-tag))
    :config
    (setq js-doc-mail-address "jamiecollinson@gmail.com"
         js-doc-author (format "Jamie Collinson <%s>" js-doc-mail-address)
         js-doc-url "jamiecollinson.com"
         js-doc-license "MIT License"))
#+END_SRC

Sometimes it's useful to use the local eslint provided by a project's node_modules directory. We call this function from a flycheck hook to enable it automatically.

#+BEGIN_SRC emacs-lisp
  (defun jc/use-eslint-from-node-modules ()
    "Set local eslint if available."
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (and root
                        (expand-file-name "node_modules/eslint/bin/eslint.js"
                                          root))))
      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint))))
#+END_SRC

** Web mode

Web mode handles html/css/js.

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.html\\'")
    :config
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-engines-alist
          '(("django" . "focus/.*\\.html\\'")
            ("ctemplate" . "realtimecrm/.*\\.html\\'"))))
#+END_SRC

** Web Beautify

Web beautify prettifies html / css / js using js-beautify - install with =npm install -g js-beautify=.

#+BEGIN_SRC emacs-lisp
  (use-package web-beautify
    :ensure t
    :bind (:map web-mode-map
           ("C-c b" . web-beautify-html)
           :map js2-mode-map
           ("C-c b" . web-beautify-js)))
#+END_SRC

** Markdown

Markdown support isn't built into Emacs, add it with =markdown-mode=.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

** Golang

Go-mode provides basic language support, we call =gofmt= on each save to keep code tidy, use eldoc to display documentation and add guru / doctor for IDE functionality.

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t
    :config
    (add-hook 'before-save-hook 'gofmt-before-save)

    (use-package go-eldoc
      :ensure t
      :config
      (add-hook 'go-mode-hook 'go-eldoc-setup))

    (use-package godoctor
      :ensure t)

    (use-package go-guru
      :ensure t))
#+END_SRC

Go guru needs a scope to look at, this function sets it to the current package.

#+BEGIN_SRC emacs-lisp
  (defun jc/go-guru-set-current-package-as-main ()
    "GoGuru requires the scope to be set to a go package which
     contains a main, this function will make the current package the
     active go guru scope, assuming it contains a main"
    (interactive)
    (let* ((filename (buffer-file-name))
           (gopath-src-path (concat (file-name-as-directory (go-guess-gopath)) "src"))
           (relative-package-path (directory-file-name (file-name-directory (file-relative-name filename gopath-src-path)))))
      (setq go-guru-scope relative-package-path)))
#+END_SRC

** Haskell

Install haskell mode.

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t)
#+END_SRC

Code formatting is easier with =hindent=.

#+BEGIN_SRC emacs-lisp
  (use-package hindent
    :ensure t)
#+END_SRC

Completion is via =ghc-mod= / =company=. Install the former separately with =cabal install ghc-mod=.

#+BEGIN_SRC emacs-lisp
  (use-package ghc
    :ensure t
    :config
    (add-hook 'haskell-mode-hook (lambda () (ghc-init))))

  (use-package company-ghc
    :ensure t
    :config
    (add-to-list 'company-backends 'company-ghc))
#+END_SRC

** Python

Emacs handles python quite well, but we can improve things with anaconda mode.

#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC

Sometimes I use kivy.

#+BEGIN_SRC emacs-lisp
  (use-package kivy-mode
    :ensure t
    :mode ("\\.kv\\'" . kivy-mode))
#+END_SRC

** Elixir

Elixir highlighting is not built into emacs at present. Elixir-mode gives all the usual niceties, and alchemist improves interaction with tools like =iex=, =mix= and =elixir-format=.

#+BEGIN_SRC emacs-lisp
  (use-package elixir-mode
    :ensure t
    :config

    (use-package alchemist
      :ensure t))
#+END_SRC
** Cucumber

Cucumber (gherkin) is a syntax for specifying behaviour driven development tests.

#+BEGIN_SRC emacs-lisp
  (use-package feature-mode
    :ensure t)
#+END_SRC

** Idris

#+BEGIN_SRC emacs-lisp
  (use-package idris-mode
    :ensure t)
#+END_SRC

** Coq

Proof general must be installed separately via:

#+BEGIN_SRC sh
  git clone https://github.com/ProofGeneral/PG ~/.emacs.d/lisp/PG
  make -C ~/.emacs.d/lisp/PG
#+END_SRC

Open .v files with Proof General's Coq mode

#+BEGIN_SRC emacs-lisp
  (require 'proof-site "~/.emacs.d/lisp/PG/generic/proof-site")
  (eval-after-load "proof-script" '(progn
                                     (define-key proof-mode-map [(C-down)] 
                                       'proof-assert-next-command-interactive)
                                     (define-key proof-mode-map [(C-up)] 
                                       'proof-undo-last-successful-command)
                                     ))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company-coq
    :ensure t
    :hook (coq-mode . company-coq-mode))
#+END_SRC

** Elm

Elm is a delightful language for reliable webapps. It compiles to JS. First install elm with =npm install -g elm elm-oracle elm-format=.

#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :ensure t
    :config
    (setq elm-format-on-save t)
    (add-to-list 'company-backends 'company-elm))
#+END_SRC

** C

Emacs has a great built in C/C++ mode, but we can improve on it with =irony-mode= for code completion via =libclang=.

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :hook (c-mode . irony-mode))
#+END_SRC

Add company mode support.

#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))
#+END_SRC

Add flycheck support.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-irony
    :ensure t
    :hook (flycheck-mode . flycheck-irony-setup))
#+END_SRC

** C#

Dotnet core runs on linux / macos. Let's get syntax highlighting.

#+BEGIN_SRC emacs-lisp
  (use-package csharp-mode
    :ensure t)
#+END_SRC

Omnisharp gives completion / refactoring support, and hooks into company-mode.

#+BEGIN_SRC emacs-lisp
  (use-package omnisharp
    :ensure t
    :hook ((csharp-mode . omnisharp-mode)
           ;; TODO: 'before-save runs globally - make this buffer local?
           (before-save . omnisharp-code-format-entire-file))
    :config
    (add-to-list 'company-backends 'company-omnisharp))
#+END_SRC

** F#

Since we have dotnet core why not?

#+BEGIN_SRC emacs-lisp
  (use-package fsharp-mode
    :ensure t)
#+END_SRC

* Org
** General settings.

I should comment on these more...

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented 'f)
  (setq org-directory "~/Dropbox/MyOrg")
  (setq org-special-ctrl-a/e 't)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (define-key global-map "\C-cc" 'org-capture)
  (setq org-mobile-directory "~/Dropbox/Aplicativos/MobileOrg")
  (setq org-src-fontify-natively 't)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-agenda-files (quote ("~/Dropbox/MyOrg/projetos.org"
                                 "~/Dropbox/MyOrg/consulta.org"
                                 "~/Dropbox/MyOrg/tickler.org")))
  (setq org-capture-templates '(("t" "Todo [entrada]" entry
                                 (file+headline "~/Dropbox/MyOrg/entrada.org" "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline "~/Dropbox/MyOrg/tickler.org" "Tickler")
                                 "* %i%? \n %U")))
  (setq org-refile-targets '(("~/Dropbox/MyOrg/projetos.org" :maxlevel . 3)
                             ("~/Dropbox/MyOrg/talvez.org" :level . 1)
                             ("~/Dropbox/MyOrg/tickler.org" :maxlevel . 2)
                             ("~/Dropbox/MyOrg/consulta.org" :maxlevel . 2)
                             ))
  (setq org-agenda-custom-commands 
        '(("o" "No trabalho" tags-todo "@unb"
           ((org-agenda-overriding-header "UnB")))
          ("h" "Em casa" tags-todo "@casa"
           ((org-agenda-overriding-header "Casa")))))
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c b") 'org-iswitchb)
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC

** Appearance

Improve the display of bullet points.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (setq org-bullets-bullet-list '("∙"))
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

** OrgRef
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t
    :config
    (setq org-ref-bibliography-notes "~/Dropbox/bibliography/notes.org"
          org-ref-default-bibliography '("~/Dropbox/bibliography/references.bib")
          org-ref-pdf-directory "~/Dropbox/bibliography/bibtex-pdfs/")) 
#+END_SRC

** Org Journal
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    :config
(setq org-journal-dir "~/Dropbox/MyOrg/journal"))
#+END_SRC

** Org Present
#+BEGIN_SRC emacs-lisp
(autoload 'org-present "org-present" nil t)

(eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))
#+END_SRC

** Export

Add bootstrap styled export.

#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC

* Extras
** AucTeX
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (setq TeX-PDF-mode t)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq TeX-view-program-selection '((output-dvi "PDF Viewer")
                                       (output-pdf "PDF Viewer")))
    (setq TeX-view-program-list
          '(("PDF Viewer" "/usr/local/bin/displayline -b %n %o %b")))
    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode))
#+END_SRC
** RefTeX
#+BEGIN_SRC emacs-lisp
    (use-package reftex
      :ensure t
      :config
      (setq reftex-plug-into-AUCTeX t)
      (setq reftex-use-fonts t)
      (setq reftex-toc-split-windows-fraction 0.2)
      (setq reftex-default-bibliography '("~/Dropbox/bibliography/references.bib"))
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
#+END_SRC
** BibTeX
#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :ensure nil
  :config
  (progn
    (setq bibtex-dialect 'biblatex
          bibtex-align-at-equal-sign t
          bibtex-text-indentation 20
          bibtex-completion-bibliography '("~/Dropbox/bibliography/references.bib"))))
#+END_SRC
** Writing

=writegood-mode= highlights bad word choices and has functions for calculating readability.

#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :ensure t
    :bind ("C-c g" . writegood-mode)
    :config
    (add-to-list 'writegood-weasel-words "actionable"))
#+END_SRC

** Stack Overflow

SX is a full stack overflow client within Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package sx
    :ensure t
    :config
    (bind-keys :prefix "C-c s"
               :prefix-map my-sx-map
               :prefix-docstring "Global keymap for SX."
               ("q" . sx-tab-all-questions)
               ("i" . sx-inbox)
               ("o" . sx-open-link)
               ("u" . sx-tab-unanswered-my-tags)
               ("a" . sx-ask)
               ("s" . sx-search)))
#+END_SRC

** Slack

I use slack for work.

#+BEGIN_SRC emacs-lisp
  (use-package slack
    :ensure t
    :commands (slack-start))
#+END_SRC

** Google

It's always useful to look things up.

#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t)
#+END_SRC

