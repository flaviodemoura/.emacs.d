#+TITLE: Emacs Configuration
#+AUTHOR: Flávio L. C. de Moura
#+EMAIL: flavio@flaviomoura.info
#+TOC: true
#+DATE: [2018-03-30 Sex 20:44]

This is my emacs configuration. Adapted from https://github.com/jamiecollinson/dotfiles

* Setup

** Personal data

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Flávio L. C. de Moura")
  (setq user-mail-address "flavio@flaviomoura.info")
#+END_SRC emacs-lisp

** Bootstrap use-package

 If =use-package= is not installed, install it.

 #+BEGIN_SRC emacs-lisp
 (require 'package)
 (add-to-list 'package-archives
 '("melpa" . "https://melpa.org/packages/") t)
 (package-initialize)
 
 ;; Bootstrap 'use-package'
 (eval-after-load 'gnutls
 '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
 (unless (package-installed-p 'use-package)
 (package-refresh-contents)
 (package-install 'use-package))
 (eval-when-compile
 (require 'use-package))
 (require 'bind-key)
 (setq use-package-always-ensure t)
 #+END_SRC emacs-lisp

** Theme

#+BEGIN_SRC emacs-lisp
 (use-package vscode-dark-plus-theme
  :ensure t
  :config
   (load-theme 'vscode-dark-plus t))
#+END_SRC emacs-lisp

** Auto fill mode

 #+BEGIN_SRC emacs-lisp
   (auto-fill-mode)
 #+END_SRC emacs-lisp

** bbdb

 #+BEGIN_SRC emacs-lisp
 (use-package bbdb
 :ensure t
 :config
   (setq bbdb-file "~/idrive/bbdb"))
 #+END_SRC emacs-lisp
 
** Flyspell 

 #+BEGIN_SRC emacs-lisp
   (setq ispell-program-name "/usr/local/bin/aspell")
   (setq ispell-dictionary "pt_BR")
   (setq ispell-list-command "--list")
   (add-hook 'org-mode-hook 'turn-on-flyspell)
   (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
   (autoload 'flyspell-delay-command "flyspell" "Delay on command." t) 
   (autoload 'tex-mode-flyspell-verify "flyspell" "" t) 
 #+END_SRC emacs-lisp

** Dired

 # #+BEGIN_SRC emacs-lisp
 #   (use-package dired
 #     :ensure t
 #     :config 
 #     (eval-after-load "dired"
 #       '(progn
 #          (define-key dired-mode-map (kbd "z")
 #            (lambda () (interactive)
 #              (let ((fn (dired-get-file-for-visit)))
 #                (start-process "default-app" nil "open" fn)))))))
 # #+END_SRC emacs-lisp

** scimax

Trying scimax
# #+BEGIN_SRC emacs-lisp
# (load "~/workspace-git/scimax/init.el")
# #+END_SRC emacs-lisp

* Preferences

 As of Emacs 26.1 (C-h N : view-emacs-news shows the recent changes), the default-major-mode variable was removed. This variable occurs in 2 places in emacs/emacs-src/pvs-ilisp.el. Because of this, PVS displays the following error

 error in process filter: Symbol's value as variable is void: default-major-mode

 To fix this error, add

 #+BEGIN_SRC emacs-lisp
   (defvar default-major-mode nil)
 #+END_SRC emacs-lisp

 Smooth scroll and keep cursor at same position when scrolling

 #+BEGIN_SRC emacs-lisp
   (setq scroll-step 1)
   (setq scroll-preserve-screen-position 1)
 #+END_SRC emacs-lisp

 Increase and decrease font size

 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-=") 'text-scale-increase)
   (global-set-key (kbd "M--") 'text-scale-decrease)
 #+END_SRC emacs-lisp

 Don't display the help screen on startup.

 #+BEGIN_SRC emacs-lisp
   (setq inhibit-startup-screen t)
 #+END_SRC emacs-lisp

 On  I use ⌘ as =meta= and prefer ⌥ to do nothing so I can still insert special characters like easily.

 #+BEGIN_SRC emacs-lisp
   (setq mac-command-modifier 'meta
           mac-option-modifier 'none)
 #+END_SRC emacs-lisp

 I prefer lines to wrap.

 #+BEGIN_SRC emacs-lisp
   (global-visual-line-mode 1)
 #+END_SRC emacs-lisp

 Let's turn off unwanted window decoration.

 #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
 #+END_SRC emacs-lisp

 I don't want the error bell.

 #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
 #+END_SRC emacs-lisp

* Coding
** Programming specific interface improvements

 When programming I like my editor to try to help me with keeping parentheses balanced.

 #+BEGIN_SRC emacs-lisp
   (use-package smartparens
     :ensure t
     :diminish smartparens-mode
     :config
     (add-hook 'prog-mode-hook 'smartparens-mode))
 #+END_SRC emacs-lisp

 Show parentheses matching

 #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
 #+END_SRC emacs-lisp

 Highlight current line

 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c h") 'global-hl-line-mode)
 #+END_SRC emacs-lisp

 Expand parentheses for me.

 #+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'electric-pair-mode)
 #+END_SRC emacs-lisp

** Git

 Magit is an awesome interface to git. Summon it with `C-x g`.

 #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :bind ("C-x g" . magit-status))
 #+END_SRC emacs-lisp

 Display line changes in gutter based on git history. Enable it everywhere.

 #+BEGIN_SRC emacs-lisp
   (use-package git-gutter
     :ensure t
     :config
     (global-git-gutter-mode 't)
     :diminish git-gutter-mode)
 #+END_SRC emacs-lisp

 TimeMachine lets us step through the history of a file as recorded in git.

 #+BEGIN_SRC emacs-lisp
   (use-package git-timemachine
     :ensure t)
 #+END_SRC emacs-lisp

** Coq

Open .v files with Proof General's Coq mode

#+BEGIN_SRC emacs-lisp
 (use-package proof-general
  :ensure t
  :config
   (eval-after-load "proof-script" '(progn
   (define-key proof-mode-map [(C-down)] 
   'proof-assert-next-command-interactive)
   (define-key proof-mode-map [(C-up)] 
   'proof-undo-last-successful-command))))
   (setq pg-hide-all-proofs t)
#+END_SRC emacs-lisp

#+BEGIN_SRC emacs-lisp
  (use-package company-coq
      :ensure t
      :hook (coq-mode . company-coq-mode))
#+END_SRC emacs-lisp

** C

Emacs has a great built in C/C++ mode, but we can improve on it with =irony-mode= for code completion via =libclang=.

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :hook (c-mode . irony-mode))
#+END_SRC emacs-lisp

Add company mode support.

#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))
#+END_SRC emacs-lisp

Add flycheck support.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-irony
    :ensure t
    :hook (flycheck-mode . flycheck-irony-setup))
#+END_SRC emacs-lisp

** Ido

 # #+BEGIN_SRC emacs-lisp
 #   (use-package ido
 #     :ensure t
 #     :config
 #     (setq ido-enable-flex-matching t)
 #     (setq ido-everywhere t)
 #     (ido-mode t)
 #     (setq ido-use-filename-at-point 'guess)
 #     (setq ido-create-new-buffer 'always)
 #     (setq ido-file-extensions-order '(".org" ".tex" ".pdf")))
 #    #+END_SRC emacs-lisp

* Extras

** LaTeX classes

 #+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'ox-latex
      (add-to-list 'org-latex-classes
                   '("entcs"
                     "\\documentclass[9pt]{entcs}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC emacs-lisp

** AucTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (setq TeX-PDF-mode t)
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil))
(setenv "PATH" "/Library/TeX/texbin/:$PATH" t)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
(setq TeX-view-program-list
      '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

(custom-set-variables
     '(TeX-source-correlate-method 'synctex)
     '(TeX-source-correlate-mode t)
     '(TeX-source-correlate-start-server t))
#+END_SRC emacs-lisp

** BibTeX

#+BEGIN_SRC emacs-lisp
(use-package bibtex
  :ensure nil
  :config
  (progn
    (setq bibtex-dialect 'biblatex
          bibtex-align-at-equal-sign t
          bibtex-text-indentation 20
          bibtex-completion-bibliography '("~/idrive/bibliography/zotLib.bib"))))
#+END_SRC emacs-lisp

** RefTeX

# #+BEGIN_SRC emacs-lisp
#   (use-package reftex
#     :ensure t
#     :config
#     (setq reftex-plug-into-AUCTeX t)
#     (setq reftex-use-fonts t)
#     (setq reftex-toc-split-windows-fraction 0.2)
#     (setq reftex-default-bibliography '("~/idrive/bibliography/zotLib.bib"))
#     (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
# #+END_SRC emacs-lisp

* Org
** General settings.

I should comment on these more...

#+BEGIN_SRC emacs-lisp
  (setq org-html-htmlize-output-type 'css)
  (setq org-latex-pdf-process 
  '("%pdflatex -interaction nonstopmode -output-directory %o %f" 
  "%bibtex %b"
  "%pdflatex -interaction nonstopmode -output-directory %o %f"   
  "%pdflatex -interaction nonstopmode -output-directory %o %f"))
  (setq org-file-apps '((auto-mode . emacs)
  ("\\.mm\\'" . default)
  ("\\.x?html?\\'" . system)
  ("\\.dvi\\'" . system)
  ("\\.pdf\\'" . "/Applications/Skim.app/Contents/MacOS/Skim %s")))
  (setq org-startup-indented 'f)
  (setq org-directory "~/idrive/bibliography/bibtex-pdfs")
  (setq org-special-ctrl-a/e 't)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (define-key global-map "\C-cc" 'org-capture)
  (setq org-mobile-directory "~/Dropbox/Aplicativos/MobileOrg")
  (setq org-src-fontify-natively 't)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-agenda-files '("~/idrive/bibliography/bibtex-pdfs"))
  (setq org-todo-keywords
  '((type "TODO(t)" "PROGRESS(s@/!)" "WAITING(w@/!)" "|" "CANCELLED(c)" "DONE(d)")))
  (setq org-agenda-custom-commands 
  '(("o" "No trabalho" tags-todo "@unb"
  ((org-agenda-overriding-header "UnB")))
  ("h" "Em casa" tags-todo "@casa"
  ((org-agenda-overriding-header "Casa")))))
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c b") 'org-iswitchb)
  (global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC emacs-lisp

** Org Roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory "~/idrive/bibliography/bibtex-pdfs")
      :bind (:map org-roam-mode-map
             (("C-c n l" . org-roam)
              ("C-c n f" . org-roam-find-file)
              ("C-c n j" . org-roam-jump-to-index)
              ("C-c n b" . org-roam-switch-to-buffer)
              ("C-c n g" . org-roam-graph))
             :map org-mode-map
             (("C-c n i" . org-roam-insert))))
(require 'org-roam-protocol)
(setq org-roam-link-title-format "R:%s")
(setq org-roam-index-file "flavio.org")
(add-hook 'after-init-hook 'org-roam-mode)
(require 'time-stamp)
(add-hook 'write-file-functions 'time-stamp)
(setq org-roam-graph-viewer "/usr/bin/open")
(setq org-roam-capture-ref-templates
'(("r" "ref" plain (function org-roam-capture--get-point)
"%?"
:file-name "${slug}"
:head "#+TITLE: ${title} \n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n\n- tags :: \n\n#+ROAM_KEY: ${ref} \n - source :: ${ref}"
:unnarrowed t)))
(setq org-roam-capture-templates
'(("d" "default" plain (function org-roam--capture-get-point)
"%?"
:file-name "${slug}"
:head "#+TITLE: ${title}\n \n#+CREATED: %U\n#+LAST_MODIFIED: %U\n#+ROAM_ALIAS: \n\n- tags ::  "
:unnarrowed t)))
#+END_SRC emacs-lisp
            
** Org Roam Bibtex

#+BEGIN_SRC emacs-lisp
 (use-package org-roam-bibtex
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :bind (:map org-mode-map
         (("C-c n a" . orb-note-actions))))
#+END_SRC emacs-lisp

** OrgRef

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t
    :config
    (setq reftex-default-bibliography '("~/idrive/bibliography/zotLib.bib")
          org-ref-default-bibliography '("~/idrive/bibliography/zotLib.bib")
          org-ref-bibliography-notes "~/idrive/bibliography/notes.org"
          org-ref-pdf-directory "~/idrive/bibliography/bibtex-pdfs/")
    (setq bibtex-completion-bibliography "~/idrive/bibliography/zotLib.bib"
          bibtex-completion-library-path "~/idrive/bibliography/bibtex-pdfs"
          bibtex-completion-notes-path "~/idrive/bibliography/helm-bibtex-notes")
    (setq bibtex-completion-pdf-open-function
          (lambda (fpath)
            (start-process "open" "*open*" "open" fpath))))
  (bibtex-set-dialect 'biblatex)
  (require 'doi-utils)
#+END_SRC emacs-lisp

** Org Journal

#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :bind 
    ("C-c n j" . org-journal-new-entry)
    :ensure t
    :config
    (setq org-journal-dir "~/idrive/bibliography/bibtex-pdfs")
    (add-hook 'org-mode-hook 'turn-on-flyspell)
    :custom
    (org-journal-date-prefix "#+TITLE: ")
    (org-journal-file-format "%Y-%m-%d.org")
    (org-journal-dir "/beorg/MyOrg/")
    (org-journal-date-format "%A, %d %B %Y"))
#+END_SRC emacs-lisp

** Org download

#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :after org
    :bind
    (:map org-mode-map
          (("s-Y" . org-download-screenshot)
           ("s-y" . org-download-yank))))
#+END_SRC emacs-lisp

** Org Present

#+BEGIN_SRC emacs-lisp
  (autoload 'org-present "org-present" nil t)

  (eval-after-load "org-present"
    '(progn
       (add-hook 'org-present-mode-hook
                 (lambda ()
                   (org-present-big)
                   (org-display-inline-images)
                   (org-present-hide-cursor)
                   (org-present-read-only)))
       (add-hook 'org-present-mode-quit-hook
                 (lambda ()
                   (org-present-small)
                   (org-remove-inline-images)
                   (org-present-show-cursor)
                   (org-present-read-write)))))
 #+END_SRC emacs-lisp

** Clocking time

#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (setq org-log-done 'time)
#+END_SRC emacs-lisp
** Calfw

 # #+BEGIN_SRC emacs-lisp
 #   (use-package calfw
 #   :ensure t)
 #   (use-package calfw-org
 #   :ensure t)
 #   (global-set-key [f2] 'cfw:open-org-calendar)
 # #+END_SRC emacs-lisp

** Org EDNA

# #+BEGIN_SRC emacs-lisp
#   (use-package org-edna
#     :ensure t)
# #+END_SRC emacs-lisp

